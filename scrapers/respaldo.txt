const puppeteer = require('puppeteer');
const cheerio = require('cheerio');

// --- Funciones auxiliares ---

async function extractTitle(page, $) {
  try {
    console.log('=== EXTRACCIÓN DE TÍTULO ALIEXPRESS ===');
    
    // Método 1: buscar en meta tag og:title (más confiable)
    console.log('1. Buscando en meta og:title...');
    const ogTitle = $('meta[property="og:title"]').attr('content');
    if (ogTitle && ogTitle.length > 0) {
      console.log(`og:title encontrado: "${ogTitle}"`);
      // Limpiar el título de AliExpress (remover " - AliExpress" al final)
      const cleanTitle = ogTitle.replace(/\s*-\s*AliExpress\s*\d*$/, '').trim();
      if (cleanTitle) {
        console.log(`✓ Título encontrado en og:title: "${cleanTitle}"`);
        return cleanTitle;
      }
    }

    // Método 2: buscar en meta tag twitter:title
    console.log('2. Buscando en meta twitter:title...');
    const twitterTitle = $('meta[name="twitter:title"]').attr('content');
    if (twitterTitle && twitterTitle.length > 0) {
      console.log(`twitter:title encontrado: "${twitterTitle}"`);
      const cleanTitle = twitterTitle.replace(/\s*-\s*AliExpress\s*\d*$/, '').trim();
      if (cleanTitle) {
        console.log(`✓ Título encontrado en twitter:title: "${cleanTitle}"`);
        return cleanTitle;
      }
    }

    // Método 3: buscar en el título de la página
    console.log('3. Buscando en title de la página...');
    const pageTitle = await page.title();
    console.log(`Title de la página: "${pageTitle}"`);
    
    if (pageTitle && pageTitle.length > 0) {
      const cleanTitle = pageTitle.replace(/\s*[-|]\s*AliExpress\s*\d*$/, '').trim();
      if (cleanTitle && cleanTitle !== 'AliExpress') {
        console.log(`✓ Título encontrado en title: "${cleanTitle}"`);
        return cleanTitle;
      }
    }

    // Método 4: buscar en h1 (fallback)
    console.log('4. Buscando en h1...');
    const h1Elements = $('h1');
    console.log(`Encontrados ${h1Elements.length} elementos h1`);
    
    for (let i = 0; i < h1Elements.length; i++) {
      const title = h1Elements.eq(i).text().trim();
      console.log(`H1 ${i + 1}: "${title}"`);
      if (title && title.length > 0) {
        console.log(`✓ Título encontrado en h1: "${title}"`);
        return title;
      }
    }

    console.log('❌ No se pudo extraer el título');
    return 'Producto AliExpress';
  } catch (error) {
    console.log('Error extrayendo título:', error.message);
    return 'Producto AliExpress';
  }
}

async function extractImage(page, $) {
  try {
    console.log('=== EXTRACCIÓN DE IMAGEN ALIEXPRESS ===');
    
    // Método 1: buscar en meta tag og:image (más confiable)
    console.log('1. Buscando en meta og:image...');
    const ogImage = $('meta[property="og:image"]').attr('content');
    if (ogImage && ogImage.startsWith('http')) {
      console.log(`✓ Imagen encontrada en og:image: "${ogImage}"`);
      return ogImage;
    }

    // Método 2: buscar en meta tag twitter:image
    console.log('2. Buscando en meta twitter:image...');
    const twitterImage = $('meta[name="twitter:image"]').attr('content');
    if (twitterImage && twitterImage.startsWith('http')) {
      console.log(`✓ Imagen encontrada en twitter:image: "${twitterImage}"`);
      return twitterImage;
    }

    // Método 3: buscar en el DOM con selectores específicos de AliExpress
    console.log('3. Buscando en DOM con selectores específicos...');
    const domSelectors = [
      'img[data-testid="product-image"]',
      'img.product-image',
      'img.main-image',
      '.product-gallery img',
      '.image-gallery img',
      'img[src*="ae01.alicdn.com"]',
      'img[src*="ae02.alicdn.com"]',
      'img[src*="ae03.alicdn.com"]',
      'img[src*="ae04.alicdn.com"]',
      'img[src*="ae05.alicdn.com"]',
      'img[role="presentation"]',
      'img[alt*="product"]',
      'img[alt*="Product"]',
      'img[alt*="main"]',
      'img[alt*="Main"]'
    ];
    
    for (const selector of domSelectors) {
      try {
        const element = $(selector);
        if (element.length > 0) {
          const src = element.first().attr('src') || element.first().attr('data-src');
          if (src && src.startsWith('http')) {
            console.log(`✓ Imagen encontrada en ${selector}: "${src}"`);
            return src;
          }
        }
      } catch (e) {}
    }

    console.log('❌ No se pudo extraer la imagen');
    return null;
  } catch (error) {
    console.log('Error extrayendo imagen:', error.message);
    return null;
  }
}

function extractCompany(platform) {
  return 'AliExpress';
}

function extractUrl(url) {
  return url;
}

// --- Función principal de extracción de precio y moneda ---

async function extractPriceAndCurrencyAliExpress(page, $) {
 console.log('🔍 Extrayendo datos desde URL...');
  
  const data = {
    precio: 'No encontrado',
    moneda: 'USD',
    precioOriginal: 'No encontrado',
    descuento: null,
    itemId: null,
    categoria: null
  };
  
  try {
    // Extraer Item ID
    const itemIdMatch = url.match(/\/item\/(\d+)\.html/);
    if (itemIdMatch) {
      data.itemId = itemIdMatch[1];
      console.log(`✓ Item ID extraído: ${data.itemId}`);
    }
    
    // Buscar el parámetro pdp_npi que contiene el precio
    const pdpNpiMatch = url.match(/pdp_npi=[^&]+/);
    if (pdpNpiMatch) {
      const pdpNpi = decodeURIComponent(pdpNpiMatch[0]);
      console.log('Parámetro pdp_npi encontrado:', pdpNpi);
      
      // MÉTODO PRINCIPAL - NO MODIFICAR
      // El formato es: pdp_npi=4@dis!USD!161.23!161.23!!1151.66!1151.66!@...
      // Estructura: 4@dis!USD!precio_actual!precio_final_con_descuento!!precio_original!precio_original!@...
      console.log('🔍 Analizando pdp_npi:', pdpNpi);
      
      const priceMatch = pdpNpi.match(/USD!([0-9.]+)!([0-9.]+)!!([0-9.]+)!([0-9.]+)!/);
      console.log('🔍 Resultado del regex:', priceMatch);
      
      if (priceMatch) {
        const precioActual = priceMatch[1];
        const precioFinalConDescuento = priceMatch[2]; // Este es el precio final que queremos
        const precioOriginal = priceMatch[3];
        
        console.log('🔍 Precios extraídos:');
        console.log('  - Precio actual:', precioActual);
        console.log('  - Precio final con descuento:', precioFinalConDescuento);
        console.log('  - Precio original:', precioOriginal);
        
        // Usar el segundo precio (precio final con descuento)
        data.precio = precioFinalConDescuento;
        data.precioOriginal = precioOriginal;
        
        // Calcular descuento si hay diferencia entre precio original y precio final
        if (parseFloat(precioOriginal) > parseFloat(precioFinalConDescuento)) {
          const descuentoPorcentaje = ((parseFloat(precioOriginal) - parseFloat(precioFinalConDescuento)) / parseFloat(precioOriginal) * 100).toFixed(0);
          data.descuento = `${descuentoPorcentaje}%`;
          console.log(`✓ Descuento calculado: ${data.descuento}`);
        }
        
        console.log(`✓ Precio final (con descuento): USD ${data.precio}`);
        console.log(`✓ Precio original: USD ${data.precioOriginal}`);
        console.log(`✓ Precio sin descuento: USD ${precioActual}`);
      } else {
        console.log('❌ No se pudo extraer precios del pdp_npi');
        console.log('🔍 Intentando regex alternativo...');
        
        // MÉTODO ALTERNATIVO - NO MODIFICAR
        // Regex alternativo más flexible que funciona como fallback
        const altPriceMatch = pdpNpi.match(/USD!([0-9.]+)!([0-9.]+)/);
        if (altPriceMatch) {
          console.log('🔍 Regex alternativo exitoso:', altPriceMatch);
          data.precio = altPriceMatch[2];
          data.precioOriginal = altPriceMatch[1];
          console.log(`✓ Precio extraído (alternativo): USD ${data.precio}`);
        }
      }
    }
    
    return data;
  } catch (error) {
    console.log('Error extrayendo datos desde URL:', error.message);
    return data;
  }
}

// --- Scraper principal de AliExpress ---

async function scrapeAliExpress(url) {
  console.log('=== INICIANDO SCRAPER ALIEXPRESS ===');
  
  const browser = await puppeteer.launch({ 
    headless: false, // Cambiar a visible para ver qué pasa
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-web-security',
      '--disable-features=VizDisplayCompositor',
      '--disable-blink-features=AutomationControlled',
      '--disable-extensions',
      '--no-first-run',
      '--no-default-browser-check',
      '--disable-default-apps',
      '--window-size=1920,1080'
    ]
  });

  try {
    const page = await browser.newPage();
    
    // Evadir detección de bots
    await page.evaluateOnNewDocument(() => {
      // Remover webdriver
      Object.defineProperty(navigator, 'webdriver', {
        get: () => undefined,
      });
      
      // Remover plugins
      Object.defineProperty(navigator, 'plugins', {
        get: () => [1, 2, 3, 4, 5],
      });
      
      // Remover languages
      Object.defineProperty(navigator, 'languages', {
        get: () => ['es-ES', 'es', 'en-US', 'en'],
      });
      
      // Remover chrome
      window.chrome = {
        runtime: {},
      };
    });
    
    // Configurar user agent más realista
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
    
    // Configurar headers adicionales
    await page.setExtraHTTPHeaders({
      'Accept-Language': 'es-ES,es;q=0.9,en;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'Sec-Fetch-Dest': 'document',
      'Sec-Fetch-Mode': 'navigate',
      'Sec-Fetch-Site': 'none',
      'Sec-Fetch-User': '?1',
      'Upgrade-Insecure-Requests': '1'
    });
    
    console.log(`Navegando a: ${url}`);
    
    // Intentar cargar la página con diferentes estrategias
    let html = '';
    let $ = null;
    
    try {
      console.log('Esperando a que la página esté lista...');
      await page.waitForTimeout(2000); // Esperar a que la página esté lista
      
      await page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });
      
      // Esperar a que se cargue el contenido básico
      await page.waitForTimeout(8000);
      
      // Hacer scroll para simular comportamiento humano
      await page.evaluate(() => {
        window.scrollTo(0, 300);
      });
      await page.waitForTimeout(2000);
      
      // Verificar si la página se cargó correctamente
      const title = await page.title();
      console.log('Título de la página después de carga:', title);
      
      if (!title || title.length < 10) {
        console.log('Página no se cargó correctamente, intentando recargar...');
        await page.reload({ waitUntil: 'networkidle2' });
        await page.waitForTimeout(5000);
      }
      
      html = await page.content();
      $ = cheerio.load(html);
      
      console.log('Longitud del HTML cargado:', html.length);
      console.log('Meta tags encontrados:', $('meta').length);
      
      // Si el HTML es muy corto, esperar más tiempo
      if (html.length < 50000) {
        console.log('HTML muy corto, esperando más tiempo...');
        await page.waitForTimeout(10000);
        html = await page.content();
        $ = cheerio.load(html);
        console.log('Longitud del HTML después de espera:', html.length);
        
              // Verificar si hay captcha
      const hasCaptcha = await page.evaluate(() => {
        const captchaSelectors = [
          'iframe[src*="captcha"]',
          'div[class*="captcha"]',
          'div[id*="captcha"]',
          'form[action*="captcha"]',
          'input[name*="captcha"]',
          'img[src*="captcha"]',
          'div[class*="verify"]',
          'div[id*="verify"]'
        ];
        
        for (const selector of captchaSelectors) {
          if (document.querySelector(selector)) {
            return true;
          }
        }
        
        // Buscar texto relacionado con captcha
        const bodyText = document.body.textContent.toLowerCase();
        return bodyText.includes('captcha') || 
               bodyText.includes('verify') || 
               bodyText.includes('robot') ||
               bodyText.includes('human');
      });
      
      if (hasCaptcha) {
        console.log('🚨 CAPTCHA DETECTADO! Complétalo en la ventana del navegador...');
        console.log('⏸️  Pausando 30 segundos para completar captcha...');
        await page.waitForTimeout(30000);
        html = await page.content();
        $ = cheerio.load(html);
        console.log('Longitud del HTML después de captcha:', html.length);
      } else if (html.length < 50000) {
        console.log('⚠️  HTML muy corto. Si hay captcha, complétalo ahora...');
        console.log('⏸️  Pausando 15 segundos para captcha manual...');
        await page.waitForTimeout(15000);
        html = await page.content();
        $ = cheerio.load(html);
        console.log('Longitud del HTML después de pausa manual:', html.length);
      }
      }
      
    } catch (navigationError) {
      console.log('Error en navegación, intentando método alternativo:', navigationError.message);
      
      // Método alternativo: usar fetch directo
      try {
        html = await page.evaluate(async (url) => {
          const res = await fetch(url, {
            headers: {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'Accept-Language': 'es-ES,es;q=0.9,en;q=0.8'
            }
          });
          return await res.text();
        }, url);
        
        $ = cheerio.load(html);
      } catch (fetchError) {
        console.log('Error en fetch alternativo:', fetchError.message);
        // Si todo falla, crear un HTML vacío
        html = '<html><head></head><body></body></html>';
        $ = cheerio.load(html);
      }
    }

    // Extraer datos
    const producto = await extractTitle(page, $);
    const { precio, moneda } = await extractPriceAndCurrencyAliExpress(page, $);
    const imagen = await extractImage(page, $);
    const empresa = extractCompany('aliexpress');
    const urlFinal = extractUrl(url);

    await browser.close();

    // Delay entre peticiones para evitar rate limiting
    await new Promise(resolve => setTimeout(resolve, 3000));

    return {
      Producto: producto,
      Empresa: empresa,
      Precio: precio,
      Moneda: moneda,
      Imagen: imagen,
      Url: urlFinal
    };

  } catch (error) {
    console.error('Error en scraping AliExpress:', error);
    await browser.close();
    
    return {
      Producto: 'AliExpress',
      Empresa: 'AliExpress',
      Precio: 'No encontrado',
      Moneda: '',
      Imagen: null,
      Url: url
    };
  }
}

module.exports = { scrapeAliExpress }; 